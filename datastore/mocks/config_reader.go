// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	config "github.com/imrenagi/go-payment/config"

	mock "github.com/stretchr/testify/mock"

	payment "github.com/imrenagi/go-payment"
)

// PaymentConfigReader is an autogenerated mock type for the PaymentConfigReader type
type PaymentConfigReader struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *PaymentConfigReader) FindAll(ctx context.Context) (*config.PaymentConfig, error) {
	ret := _m.Called(ctx)

	var r0 *config.PaymentConfig
	if rf, ok := ret.Get(0).(func(context.Context) *config.PaymentConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.PaymentConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPaymentType provides a mock function with given fields: ctx, paymentType, opts
func (_m *PaymentConfigReader) FindByPaymentType(ctx context.Context, paymentType payment.PaymentType, opts ...payment.Option) (config.FeeConfigReader, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, paymentType)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 config.FeeConfigReader
	if rf, ok := ret.Get(0).(func(context.Context, payment.PaymentType, ...payment.Option) config.FeeConfigReader); ok {
		r0 = rf(ctx, paymentType, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.FeeConfigReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, payment.PaymentType, ...payment.Option) error); ok {
		r1 = rf(ctx, paymentType, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
